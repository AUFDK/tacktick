// Данные тактик
const TACTICS = {
    'Тактика от Edisa': {
        '1': ['5 7 26', '22 24 20'],
        '2': ['2 8 10', '21 16 1'],
        '3': ['26 30 35', '5 22 26'],
        '4': ['18 25 10', '35 21 10'],
        '5': ['34 36 0', '32 26 11'],
        '6': ['10 24 20', '6 21 27'],
        '7': ['11 4 33', '11 28 0'],
        '8': ['8 27 36', '8 24 36'],
        '9': ['26 8 10', '26 8 6'],
        '10': ['17 20 7', '25 7 32'],
        '11': ['16 21 18', '21 0 16'],
        '12': ['13 17 36', '20 22 13'],
        '13': ['36 0 9', '0 36 00'],
        '14': ['25 31 29', '6 8 10'],
        '15': ['30 32 26', '3 5 7'],
        '16': ['10 22 20', '31 10 29'],
        '17': ['32 9 23', '32 26 9'],
        '18': ['36 00 13', '00 36 1'],
        '19': ['13 20 11', '0 00 1'],
        '20': ['00 15 14', '0 00 4'],
        '21': ['6 25 27', '6 31 29'],
        '22': ['22 24 9', '22 24 17'],
        '23': ['16 19 25', '4 21 31'],
        '24': ['22 7 14', '22 11 3'],
        '25': ['10 5 3', '10 1 3'],
        '26': ['9 31 29', '9 14 8'],
        '27': ['28 1 2', '28 1 2'],
        '28': ['27 19 25', '27 1 2'],
        '29': ['5 7 9', '20 7 11'],
        '30': ['30 8 6', '30 5 4'],
        '31': ['00 14 5', '0 00 1'],
        '32': ['0 00 2', '0 00 26'],
        '33': ['13 24 15', '1 3 5'],
        '34': ['2 26 23', '22 11 5'],
        '35': ['4 8 29', '4 33 31'],
        '36': ['0 00 13', '0 00 34'],
        '0': ['00 8 10', '6 8 10'],
        '00': ['1 20 36', '0 36 10'],
    },
    'Тактика от Славы Спец': {
        '1': ['28 21 27', '13 2 00'],
        '2': ['27 23 3', '28 35 14'],
        '3': ['12 27 6', '30 34 15'],
        '4': ['11 24 35', '6 8 7'],
        '5': ['30 18 24', '5 25 3'],
        '6': ['17 18 32', '9 26 16'],
        '7': ['16 12 14', '11 20 10'],
        '8': ['15 29 34', '22 11 33'],
        '9': ['14 26 30', '27 30 6'],
        '10': ['13 15 20', '30 5 25'],
        '11': ['4 35 33', '22 20 7'],
        '12': ['16 19 3', '13 00 27'],
        '13': ['27 10 36', '1 25 31'],
        '14': ['9 16 18', '34 3 12'],
        '15': ['8 22 24', '35 1 00'],
        '16': ['7 18 19', '32 14 9'],
        '17': ['20 6 23', '32 22 5'],
        '18': ['36 00 1', '5 17 19'],
        '19': ['34 22 23', '1 00 21'],
        '20': ['33 7 30', '10 22 24'],
        '21': ['32 12 1', '22 18 20'],
        '22': ['31 17 6', '33 11 23'],
        '23': ['30 9 26', '32 33 35'],
        '24': ['22 29 4', '35 36 13'],
        '25': ['10 36 27', '5 30 32'],
        '26': ['35 9 30', '4 14 35'],
        '27': ['1 10 00', '2 21 7'],
        '28': ['1 22 2', '9 8 35'],
        '29': ['24 22 30', '12 25 14'],
        '30': ['23 5 20', '32 27 3'],
        '31': ['22 29 13', '33 28 36'],
        '32': ['21 17 5', '20 1 00'],
        '33': ['20 7 22', '35 23 9'],
        '34': ['19 35 14', '17 15 22'],
        '35': ['4 26 31', '9 26 12'],
        '36': ['13 25 10', '1 24 18'],
        '0': ['18 23 00', '5 24 13'],
        '00': ['8 27 35', '19 29 32'],
    },
    'Тактика от Дракона': {
        '1': ['30 18 10', '32 36 23'],
        '2': ['6 28 10', '28 33 31'],
        '3': ['7 12 27', '14 17 29'],
        '4': ['35 5 10', '0 00 1'],
        '5': ['30 22 24', '23 1 00'],
        '6': ['10 33 31', '0 1 28'],
        '7': ['12 34 00', '11 20 8'],
        '8': ['20 26 14', '11 7 13'],
        '9': ['26 23 33', '27 30 6'],
        '10': ['13 15 20', '1 3 25'],
        '11': ['22 17 33', '7 0 10'],
        '12': ['16 19 34', '3 00 27'],
        '13': ['27 11 22', '17 26 29'],
        '14': ['32 16 17', '5 7 3'],
        '15': ['17 22 24', '9 1 00'],
        '16': ['21 18 19', '34 14 9'],
        '17': ['2 19 3', '32 6 29'],
        '18': ['36 00 1', '26 25 10'],
        '19': ['11 7 20', '1 00 3'],
        '20': ['26 8 30', '21 22 24'],
        '21': ['7 0 8', '22 3 12'],
        '22': ['24 17 6', '1 0 22'],
        '23': ['30 12 5', '33 26 9'],
        '24': ['22 31 9', '35 4 10'],
        '25': ['10 25 27', '30 27 32'],
        '26': ['9 23 33', '16 12 0'],
        '27': ['30 36 34', '25 10 2'],
        '28': ['29 22 2', '6 8 2'],
        '29': ['2 17 3', '30 31 14'],
        '30': ['5 12 22', '24 1 34'],
        '31': ['6 16 19', '33 28 6'],
        '32': ['14 5 3', '36 1 00'],
        '33': ['28 31 6', '25 3 5'],
        '34': ['36 12 7', '11 00 0'],
        '35': ['4 8 31', '9 26 12'],
        '36': ['0 00 1', '0 00 30'],
        '0': ['2 5 6', '6 8 10'],
        '00': ['5 27 35', '36 17 32'],
    }
};

// Красные числа в рулетке
const redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];

// Глобальные переменные
let currentTactic = '';
let isAnimating = false;

// Данные для тактики HOMA
const homaData = [14,12,30,5,36,28,20,12,6,6,32,19,22,2,17,33,25,29,27,30,35,16,34,17,3,20,20,9,33,2,33,28,1,16,0,7,16,22,1,31,4,36,9,19,21,32,33,27,36,10,32,15,18,1,36,25,28,17,2,10,10,17,12,22,15,10,29,36,34,32,3,22,13,5,5,24,14,3,20,31,8,29,36,0,0,1,9,10,4,34,35,6,35,10,34,0,12,7,3,28,0,25,27,34,25,0,3,32,8,36,11,21,34,27,4,34,17,25,29,34,14,15,19,11,4,29,27,11,0,31,6,9,9,0,31,20,6,31,21,8,20,22,0,3,23,28,25,17,16,23,17,12,1,10,33,1,3,34,28,19,33,9,11,6,24,30,11,9,11,13,4,20,17,4,4,15,6,15,4,30,10,31,10,24,19,32,30,1,22,26,0,33,26,27,2,2,19,29,18,16,32,20,23,11,17,15,20,6,5,14,11,0,11,26,35,22,14,0,18,4,29,17,26,16,4,14,20,10,15,8,24,5,12,26,26,2,1,29,22,7,7,19,11,6,9,34,23,13,22,21,26,18,30,35,18,14,9,18,30,1,22,10,32,26,33,0,24,25,0,2,25,13,26,14,31,2,32,8,11,32,14,24,34,11,4,31,34,3,26,35,12,1,26,4,9,16,33,6,0,10,36,9,0,8,9,1,32,11,13,4,8,23,26,27,33,36,14,21,14,12,25,36,7,23,0,34,31,28,23,15,36,18,0,28,12,30,0,7,18,3,8,31,12,18,36,30,22,15,5,23,2,30,10,22,14,26,10,33,25,12,17,20,15,25,29,10,29,22,10,25,33,26,6,5,26,21,28,31,13,18,2,30,22,32,16,29,2,0,22,29,0,28,0,33,22,14,9,21,14,26,10,20,32,16,0,25,22,22,5,10,4,8,23,6,32,9,11,30,34,3,16,13,27,8,23,25,26,30,14,32,32,28,25,36,35,32,13,23,8,35,19,8,23,18,14,18,8,3,23,17,10,9,23,32,5,24,14,9,14,14,7,21,17,22,28,33,33,24,29,27,17,5,34,12,11,1,31,30,13,4,11,16,9,32,13,34,30,19,4,23,33,15,34,13,12,34,14,14,18,25,17,24,31,34,12,31,1,24,1,4,15,30,34,9,27,34,16,34,18,27,11,10,30,28,3,4,18,24,6,35,0,22,28,29,12,11,0,33,29,34,18,0,24,9,21,25,1,12,23,11,11,4,23,18,25,15,13,5,21,30,24,14,35,34,30,17,19,7,16,17,16,0,28,14,28,35,15,22,24,20,7,26,0,0,2,14,12,3,27,21,18,25,28,14,10,14,10,9,33,31,18,1,15,32,18,27,6,19,29,27,17,11,1,0,1,12,8,19,35,19,29,1,31,10,20,24,19,34,27,3,16,0,33,11,14,14,34,34,32,6,29,35,2,16,29,16,36,9,20,15,14,9,16,34,0,36,8,17,3,24,21,15,32,24,21,8,26,19,23,22,32,26,12,27,21,7,22,4,9,11,33,23,35,24,7,6,8,31,2,24,35,27,2,36,11,33,25,25,36,16,5,12,6,28,35,9,34,9,30,5,32,27,32,18,32,7,10,27,35,31,27,6,11,18,4,2,15,0,5,6,7,36,11,18,36,23,20,17,6,1,15,14,0,15,8,30,34,22,11,9,21,27,17,5,15,36,34,19,16,22,13,30,0,5,5,27,0,31,5,12,32,19,30,1,14,1,23,28,11,4,6,0,21,6,22,9,0,3,26,33,6,17,15,3,28,2,33,0,7,14,11,24,13,36,31,19,0,4,32,21,9,10,21,34,36,23,35,13,34,4,27,8,31,16,29,15,6,0,11,13,18,35,18,30,22,18,12,32,28,1,3,4,28,10,27,20,0,28,20,20,32,20,30,33,33,21,13,8,4,0,23,35,25,30,21,25,13,0,36,6,4,3,3,24,31,2,15,25,12,28,21,19,34,23,23,31,0,23,5,17,22,29,13,1,24,6,18,16,22,10,1,17,15,5,15,7,28,24,19,28,24,28,36,0,18,0,36,17,32,19,0,1,25,31,9,35,33,28,27,14,0,22,34,0,15,17,35,6,4,15,18,7,17,25,33,14,28,25,24,30,18,26,19,0,25,8,27,27,34,36,7,2,24,34,13,19,1,30,9,17,19,23,8,16,31,35,23,0,26,32,1,7,16,24,30,35,10,25,26,9,21,9,6,25,19,28,12,21,11,32,8,15,25,7,27,21,23,26,24,5,27,29,0,18,3,11,6,24,33,0,9,31,25,3,23,9,22,34,0,5,30,10,1,9,30,8,35,14,26,36,19,25,12,10,15,7,5,25,15,2,1,31,15,26,22,27,4,19,16,34,34,31,16,29,8,17,11,13,23,29,30,33,18,36,8,14,10,15,18,5,9,34,17,6,19,34,36,31,16,3,18,33,14,21,24,29,36,35,12,24,31,0,24,26,4,2,3,31,35,35,13,13,10,12,34,13,36,34,33,25,23,9,7,19,9,17,36,26,13,24,10,13,35,36,3,31,31,2,33,8,14,9,13,9,14,1,35,20,7,7,26,5,29,20,11,28,12,31,31,16,19,12,28,34,1,27,26,17,22,2,0,27,11,8,29,12,10,12,0,0,28,31,5,0,26,22,26,2,7,15,0,35,0,28,26,5,3,22,29,36,27,13,0,6,24,9,35,2,19,6,22,17,30,13,17,1,4,6,16,1,5,36,13,32,30,15,34,32,26,30,19,31,8,6,0,4,3,34,21,18,10,31,28,3,18,26,18,13,36,24,19,22,20,15,4,11,25,22,1,32,16,0,4,25,27,35,28,13,13,26,0,2,8,0,22,2,25,17,8,27,22,5,17,8,7,0,0,24,29,15,7,31,0,7,9,13,10,32,4,18,31,26,23,5,22,9,35,11,36,33,5,7,4,13,13,11,28,26,3,22,22,25,12,12,28,14,0,1,22,18,35,35,25,25,0,25,2,0,21,8,8,2,2,15,7,21,2,9,11,13,27,4,24,23,2,19,34,5,16,4,35,25,19,16,16,15,1,13,18,14,0,32,11,36,23,25,24,30,22,2,1,34,26,33,15,28,35,10,20,14,10,9,20,10,10,36,13,32,0,27,10,29,24,2,36,19,8,18,2,0,14,11,9,24,4,34,20,6,17,26,28,35,1,8,18,2,11,32,17,35,23,31,23,14,33,12,21,7,30,10,17,11,2,4,35,11,2,33,29,35,0,17,13,36,0,14,18,14,16,21,18,5,7,0,14,23,35,9,19,17,16,16,31,7,23,8,35,11,11,2,32,6,21,13,20,8,35,35,30,8,21,6,7,7,20,20,22,16,2,26,20,9,6,34,4,31,12,4,7,22,10,7,24,32,5,12,2,13,19,16,27,29,7,5,20,2,3,31,15,26,17,18,6,31,27,11,10,35,0,11,11,15,14,30,13,4,17,3,0,36,29,7,21,2,35,18,5,19,22,30,22,10,19,10,33,25,26,11,3,8,36,11,35,0,29,31,17,3,31,11,31,11,30,14,9,28,15,2,4,6,33,26,13,6,16,1,7,18,15,19,13,4,10,18,16,15,4,18,2,4,6,13,31,6,8,25,1,9,25,5,17,9,32,25,1,25,29,26,30,2,33,20,26,0,10,9,2,17,20,7,2,18,25,27,32,2,11,36,11,33,2,33,33,4,0,28,14,6,7,14,18,19,5,21,6,9,26,6,28,29,27,20,33,19,8,28,24,20,31,8,4,30,24,28,19,2,15,16,2,28,11,5,32,0,33,9,30,7,4,11,19,5,26,29,4,19,3,32,25,22,22,8,16,25,25,36,6,6,22,12,9,1,10,6,34,19,21,24,5,14,0,8,16,11,0,30,6,3,24,26,34,7,28,1,36,22,32,3,12,31,4,11,30,26,11,23,12,25,10,27,5,10,0,32,10,30,32,32,23,0,0,4,32,17,5,28,14,32,36,17,3,27,9,0,1,32,10,12,30,8,16,36,15,14,33,11,7,2,14,32,2,1,31,33,29,17,31,4,18,13,15,16,10,9,16,23,4,12,0,2,13,17,10,3,7,17,14,32,23,5,14,6,1,31,33,0,15,16,25,17,4,5,5,2,22,0,0,12,11,21,6,3,3,26,10,21,18,26,35,22,19,10,10,2,21,3,16,13,25,16,24,4,22,8,33,22,4,16,23,35,33,1,22,22,0,30,4,34,18,30,17,33,13,22,11,36,6,6,13,5,20,31,23,5,10,9,4,14,14,3,23,0,4,16,27,4,14,28,10,8,8,33,26,15,23,6,23,24,17,16,15,18,4,31,19,0,11,7,31,0,12,33,15,34,0,34,30,21,21,28,19,35,14,12,0,16,20,4,7,20,4,1,9,6,27,21,4,26,18,12,31,9,1,29,15,10,18,3,9,13,29,24,1,18,12,8,16,10,1,24,25,27,16,3,16,0,29,5,15,25,8,32,14,6,8,8,27,1,17,15,0,9,34,5,15,1,0,3,23,25,8,10,5,11,29,14,31,10,21,11,23,0,22,2,28,35,23,24,3,17,17,1,32,30,35,8,35,31,22,4,33,13,9,3,24,30,0,18,0,17,6,0,11,11,25,5,12,12,32,30,32,30,17,5,36,16,35,35,14,19,0,16,32,17,16,26,4,9,34,4,22,7,27,13,24,5,0,21,32,25,3,5,28,27,33,19,13,15,9,27,9,21,0,21,20,21,17,29,36,26,16,7,32,34,31,13,34,5,35,19,16,4,25,0,5,32,16,29,4,18,31,28,2,8,32,31,4,20,29,2,4,19,27,23,32,13,31,29,26,28,18,0,1,3,17,11,33,1,31,7,16,18,13,32,21,24,16,24,26,27,23,28,8,11,7,15,8,8,10,7,32,15,33,26,12,14,26,27,9,15,24,25,8,30,15,5,32,10,3,20,13,28,20,29,20,34,2,10,3,5,11,33,33,23,5,27,5,16,29,33,16,19,21,26,24,35,19,33,5,11,11,21,27,3,5,4,36,34,8,3,11,30,17,9,11,20,26,22,27,1,12,13,30,27,33,33,18,19,4,15,27,6,0,4,5,5,34,18,34,6,36,7,5,9,29,1,15,25,17,20,34,13,30,33,0,5,33,1,10,20,27,27,4,26,28,33,23,22,33,31,31,31,33,2,6,23,21,14,23,22,0,6,29,21,36,13,15,24,8,10,22,1,26,34,7,35,24,16,18,16,17,4,1,6,19,4,10,21,4,4,23,6,20,29,14,4,11,20,27,13,26,14,5,25,9,14,4,31,1,28,19,1,25,17,27,26,3,18,29,25,33,3,25,17,30,11,16,24,13,4,22,7,18,11,30,12,22,27,11,0,7,35,22,23,6,30,15,18,14,8,21,4,19,12,26,35,25,36,27,10,33,36,27,10,33,19,20,17,2,9,12,11,12,0,13];

// Основные функции
function showPage(pageId) {
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    
    setTimeout(() => {
        document.getElementById(pageId).classList.add('active');
    }, 100);
}

function selectTactic(tacticName) {
    if (isAnimating) return;
    
    currentTactic = tacticName;
    document.getElementById('tactic-name').textContent = tacticName;
    createNumberGrid();
    showPage('tactic-page');
}

function createNumberGrid() {
    const grid = document.getElementById('numbers-grid');
    grid.innerHTML = '';

    for (let i = 1; i <= 36; i++) {
        const button = document.createElement('button');
        button.className = 'number-btn';
        button.textContent = i;
        button.onclick = () => handleNumber(i.toString());
        button.style.animationDelay = `${i * 0.02}s`;

        if (redNumbers.includes(i)) {
            button.classList.add('red');
        } else {
            button.classList.add('black');
        }

        // Добавляем эффекты
        button.addEventListener('click', function() {
            if (isAnimating) return;
            
            this.classList.add('selected');
            setTimeout(() => {
                this.classList.remove('selected');
            }, 400);
            
            // Вибрация на мобильных
            if (navigator.vibrate) {
                navigator.vibrate(50);
            }
            
            // Визуальный эффект
            createRippleEffect(this);
        });

        grid.appendChild(button);
    }
}

function createRippleEffect(element) {
    const ripple = document.createElement('div');
    ripple.style.position = 'absolute';
    ripple.style.width = ripple.style.height = '100%';
    ripple.style.background = 'radial-gradient(circle, rgba(255,255,255,0.5) 0%, transparent 70%)';
    ripple.style.borderRadius = '50%';
    ripple.style.transform = 'scale(0)';
    ripple.style.opacity = '1';
    ripple.style.transition = 'transform 0.5s, opacity 0.5s';
    ripple.style.pointerEvents = 'none';
    ripple.style.top = '0';
    ripple.style.left = '0';
    
    element.style.position = 'relative';
    element.appendChild(ripple);
    
    setTimeout(() => {
        ripple.style.transform = 'scale(2)';
        ripple.style.opacity = '0';
    }, 10);
    
    setTimeout(() => {
        if (ripple.parentNode) {
            ripple.remove();
        }
    }, 500);
}

function handleNumber(number) {
    if (isAnimating) return;
    
    const display = document.getElementById('result-display').querySelector('.result-content');
    
    if (currentTactic === 'Тактика рандом') {
        showRandomResult(display);
    } else if (currentTactic === 'Тактика от HOMA') {
        showHOMAResult(display, number);
    } else {
        showTacticResult(display, number);
    }
}

function showRandomResult(display) {
    isAnimating = true;
    let counter = 0;
    
    const interval = setInterval(() => {
        const randomNumbers = [
            Math.floor(Math.random() * 37),
            Math.floor(Math.random() * 37),
            Math.floor(Math.random() * 37)
        ];
        const displayNumbers = randomNumbers.map(num => num === 0 ? '00' : num);
        display.textContent = "Ответ: " + displayNumbers.join(" ");
        counter++;

        if (counter >= 15) {
            clearInterval(interval);
            isAnimating = false;
        }
    }, 80);
}

function showTacticResult(display, number) {
    isAnimating = true;
    const tacticData = TACTICS[currentTactic];
    
    if (tacticData && tacticData[number]) {
        const options = tacticData[number];
        let counter = 0;

        const interval = setInterval(() => {
            const randomDisplay = [
                Math.floor(Math.random() * 100),
                Math.floor(Math.random() * 100),
                Math.floor(Math.random() * 100)
            ];
            display.textContent = "Расчёт: " + randomDisplay.join(" ");
            counter++;

            if (counter >= 12) {
                clearInterval(interval);
                const selectedOption = options[Math.floor(Math.random() * options.length)];
                display.textContent = "Ответ: " + selectedOption;
                isAnimating = false;
            }
        }, 100);
    } else {
        display.textContent = 'Нет данных для числа ' + number;
        isAnimating = false;
    }
}

function showHOMAResult(display, number) {
    isAnimating = true;
    display.textContent = "Анализ...";
    
    let counter = 0;
    const interval = setInterval(() => {
        const dots = '.'.repeat((counter % 3) + 1);
        display.textContent = "Анализ данных" + dots;
        counter++;
        
        if (counter >= 8) {
            clearInterval(interval);
            const predictions = calculatePredictions(number);
            
            if (predictions.length === 0) {
                display.textContent = `Недостаточно данных для числа ${number}`;
            } else {
                const resultText = `Прогноз после ${number}: ${predictions.map(item => `${item.number}(${item.percent}%)`).join(', ')}`;
                display.textContent = resultText;
            }
            
            isAnimating = false;
        }
    }, 100);
}

function calculatePredictions(chosenNumber) {
    if (homaData.length === 0) return [];
    
    let nextCounts = {};
    chosenNumber = Number(chosenNumber === '00' ? 0 : chosenNumber);
    
    for (let i = 0; i < homaData.length - 1; i++) {
        if (homaData[i] === chosenNumber) {
            const nextNumber = homaData[i + 1];
            nextCounts[nextNumber] = (nextCounts[nextNumber] || 0) + 1;
        }
    }
    
    let countsArray = Object.entries(nextCounts).map(([num, count]) => ({
        number: parseInt(num, 10),
        count
    }));
    
    countsArray.sort((a, b) => b.count - a.count);
    let top3 = countsArray.slice(0, 3);
    let totalCount = top3.reduce((sum, item) => sum + item.count, 0);
    
    if (totalCount === 0) return [];
    
    let predictions = top3.map(item => ({
        number: item.number === 0 ? '00' : item.number,
        percent: Math.round((item.count / totalCount) * 100)
    }));
    
    return predictions;
}

function goBack() {
    if (isAnimating) return;
    showPage('main-page');
}

// Создание частиц
function createParticle() {
    const particle = document.createElement('div');
    particle.style.position = 'fixed';
    particle.style.left = Math.random() * window.innerWidth + 'px';
    particle.style.width = particle.style.height = Math.random() * 3 + 1 + 'px';
    particle.style.background = `rgba(${120 + Math.random() * 135}, ${119 + Math.random() * 136}, ${198 + Math.random() * 57}, 0.6)`;
    particle.style.borderRadius = '50%';
    particle.style.pointerEvents = 'none';
    particle.style.zIndex = '-1';
    particle.style.opacity = '0';
    
    // Анимация частицы
    particle.style.animation = 'particleDrift 12s linear forwards';
    
    document.body.appendChild(particle);
    
    setTimeout(() => {
        if (particle.parentNode) {
            particle.remove();
        }
    }, 12000);
}

// Создаем частицы периодически
setInterval(createParticle, 800);

// Добавляем CSS анимацию для частиц программно
const style = document.createElement('style');
style.textContent = `
    @keyframes particleDrift {
        0% {
            transform: translateY(100vh) scale(0);
            opacity: 0;
        }
        10% {
            opacity: 0.6;
        }
        90% {
            opacity: 0.6;
        }
        100% {
            transform: translateY(-100px) scale(1);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// Инициализация при загрузке
document.addEventListener('DOMContentLoaded', function() {
    // Создаем начальные частицы
    for (let i = 0; i < 5; i++) {
        setTimeout(createParticle, i * 200);
    }
    
    // Добавляем обработчики для зеленых кнопок 0 и 00
    setTimeout(() => {
        const zeroButtons = document.querySelectorAll('.zero-btn');
        zeroButtons.forEach(button => {
            button.addEventListener('click', function() {
                if (isAnimating) return;
                
                this.classList.add('selected');
                setTimeout(() => {
                    this.classList.remove('selected');
                }, 400);
                
                if (navigator.vibrate) {
                    navigator.vibrate(50);
                }
                
                createRippleEffect(this);
            });
        });
    }, 100);
});